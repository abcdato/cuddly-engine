{"version":3,"sources":["components/NewTaskForm/NewTaskForm.jsx","components/Task/Task.jsx","components/TaskList/TaskList.jsx","components/TaskFilter/TasksFilter.jsx","components/Footer/Footer.jsx","components/App/App.jsx","index.js"],"names":["NewTaskForm","state","label","onChange","e","setState","target","value","onSubmit","preventDefault","trim","props","handleAdd","this","className","placeholder","Component","Task","handleEdit","id","onToggleEditing","handleDelete","onToggleDone","done","editing","creationDate","timeCreated","formatDistanceToNow","Date","includeSeconds","type","checked","onClick","defaultProps","String","TaskList","todos","tasks","map","item","itemProps","TasksFilter","filter","onFilterChange","button","name","Footer","itemsLeft","clearCompleted","App","todoData","JSON","parse","localStorage","getItem","createTask","uuidv4","toggleProp","arr","propName","el","todo","newTask","text","filterTasks","itemsDone","length","filteredTasks","setItem","stringify","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8a1e04f0.chunk.js","sourcesContent":["import { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './NewTaskForm.css';\n\nexport default class NewTaskForm extends Component {\n  static propTypes = {\n    handleAdd: PropTypes.func.isRequired,\n  };\n\n  state = {\n    label: '',\n  };\n\n  onChange = (e) => {\n    this.setState({\n      label: e.target.value,\n    });\n  };\n\n  onSubmit = (e) => {\n    e.preventDefault();\n\n    if (this.state.label.trim() === '') {\n      this.setState({\n        label: '',\n      });\n      return;\n    }\n    this.props.handleAdd(this.state.label);\n    this.setState({\n      label: '',\n    });\n  };\n\n  render() {\n    return (\n      <form onSubmit={this.onSubmit}>\n        <input\n          className=\"new-todo\"\n          placeholder=\"What needs to be done?\"\n          value={this.state.label}\n          onChange={this.onChange}\n        ></input>\n      </form>\n    );\n  }\n}\n","import { formatDistanceToNow } from 'date-fns';\nimport { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './Task.css';\n\nexport default class Task extends Component {\n  static defaultProps = {\n    label: 'Default task',\n    done: false,\n    editing: false,\n    creationDate: String(new Date()),\n  };\n\n  static propTypes = {\n    label: PropTypes.string,\n    done: PropTypes.bool,\n    editing: PropTypes.bool,\n    creationDate: PropTypes.string,\n    handleDelete: PropTypes.func.isRequired,\n    onToggleDone: PropTypes.func.isRequired,\n    onToggleEditing: PropTypes.func.isRequired,\n  };\n\n  state = {\n    label: this.props.label,\n  };\n\n  onChange = (e) => {\n    this.setState({\n      label: e.target.value,\n    });\n  };\n\n  onSubmit = (e) => {\n    e.preventDefault();\n\n    if (this.state.label.trim() === '') {\n      this.props.handleDelete();\n      return;\n    }\n\n    this.props.handleEdit(this.props.id, this.state.label);\n    this.props.onToggleEditing(this.props.id);\n  };\n\n  render() {\n    const {\n      label,\n      handleDelete,\n      onToggleDone,\n      onToggleEditing,\n      done,\n      editing,\n      creationDate,\n    } = this.props;\n\n    const timeCreated = formatDistanceToNow(new Date(creationDate), {\n      includeSeconds: true,\n    });\n\n    const className = done ? 'completed' : editing ? 'editing' : 'active';\n\n    return (\n      <li className={className}>\n        <div className=\"view\">\n          <input\n            className=\"toggle\"\n            type=\"checkbox\"\n            checked={done}\n            onChange={onToggleDone}\n          />\n          <label>\n            <span className=\"description\">{label}</span>\n            <span className=\"created\">created {timeCreated} ago</span>\n          </label>\n          <button className=\"icon icon-edit\" onClick={onToggleEditing}></button>\n          <button className=\"icon icon-destroy\" onClick={handleDelete}></button>\n        </div>\n        <form onSubmit={this.onSubmit}>\n          <input\n            type=\"text\"\n            className=\"edit\"\n            value={this.state.label}\n            onChange={this.onChange}\n          />\n        </form>\n      </li>\n    );\n  }\n}\n","import Task from '../Task/Task';\nimport PropTypes from 'prop-types';\n\nimport './TaskList.css';\n\nexport const TaskList = ({\n  todos,\n  handleDelete,\n  handleEdit,\n  onToggleDone,\n  onToggleEditing,\n}) => {\n  const tasks = todos.map((item) => {\n    const { id, ...itemProps } = item;\n\n    return (\n      <Task\n        key={id}\n        id={id}\n        {...itemProps}\n        handleDelete={() => handleDelete(id)}\n        handleEdit={handleEdit}\n        onToggleDone={() => onToggleDone(id)}\n        onToggleEditing={() => onToggleEditing(id)}\n      />\n    );\n  });\n\n  return (\n    <section className=\"main\">\n      <ul className=\"todo-list\">{tasks}</ul>\n    </section>\n  );\n};\n\nTaskList.defaultProps = {\n  handleDelete: () => {},\n  handleEdit: () => {},\n  onToggleDone: () => {},\n  onToggleEditing: () => {},\n};\n\nTaskList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.object).isRequired,\n  handleDelete: PropTypes.func,\n  handleEdit: PropTypes.func,\n  onToggleDone: PropTypes.func,\n  onToggleEditing: PropTypes.func,\n};\n","import PropTypes from 'prop-types';\n\nimport './TaskFilter.css';\n\nexport const TasksFilter = ({ filter, onFilterChange }) => {\n  const buttons = [\n    { name: 'all', label: 'All' },\n    { name: 'active', label: 'Active' },\n    { name: 'completed', label: 'Completed' },\n  ];\n\n  const button = buttons.map(({ name, label }) => {\n    const selected = filter === name;\n    const className = selected ? 'selected' : null;\n\n    return (\n      <li key={name}>\n        <button className={className} onClick={() => onFilterChange(name)}>\n          {label}\n        </button>\n      </li>\n    );\n  });\n\n  return <ul className=\"filters\">{button}</ul>;\n};\n\nTasksFilter.defaultProps = {\n  filter: 'all',\n};\n\nTasksFilter.propTypes = {\n  filter: PropTypes.string,\n  onFilterChange: PropTypes.func.isRequired,\n};\n","import { TasksFilter } from '../TaskFilter/TasksFilter';\nimport PropTypes from 'prop-types';\n\nimport './Footer.css';\n\nexport const Footer = ({\n  itemsLeft,\n  clearCompleted,\n  filter,\n  onFilterChange,\n}) => {\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\">{itemsLeft} items left</span>\n      <TasksFilter filter={filter} onFilterChange={onFilterChange} />\n      <button className=\"clear-completed\" onClick={clearCompleted}>\n        Clear completed\n      </button>\n    </footer>\n  );\n};\n\nFooter.defaultProps = {\n  itemsLeft: 3,\n  filter: 'all',\n  clearCompleted: () => {},\n  onFilterChange: () => {},\n};\n\nFooter.propTypes = {\n  itemsLeft: PropTypes.number,\n  filter: PropTypes.string,\n  clearCompleted: PropTypes.func.isRequired,\n  onFilterChange: PropTypes.func,\n};\n","import React, { Component } from 'react';\nimport NewTaskForm from '../NewTaskForm/NewTaskForm';\nimport { TaskList } from '../TaskList/TaskList';\nimport { Footer } from '../Footer/Footer';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport './App.css';\n\nexport default class App extends Component {\n  state = {\n    todoData: JSON.parse(localStorage.getItem('todoData')) || [],\n    filter: JSON.parse(localStorage.getItem('filter')) || 'all',\n  };\n\n  createTask = (label) => {\n    return {\n      label,\n      done: false,\n      editing: false,\n      creationDate: String(new Date()),\n      id: uuidv4(),\n    };\n  };\n\n  toggleProp = (arr, id, propName) => {\n    return arr.map((el) => {\n      if (el.id === id) {\n        return { ...el, [propName]: !el[propName] };\n      }\n      return el;\n    });\n  };\n\n  handleDelete = (id) => {\n    this.setState(({ todoData }) => {\n      return {\n        todoData: todoData.filter((todo) => todo.id !== id),\n      };\n    });\n  };\n\n  handleAdd = (label) => {\n    const newTask = this.createTask(label);\n\n    this.setState(({ todoData }) => {\n      return {\n        todoData: [...todoData, newTask],\n      };\n    });\n  };\n\n  handleEdit = (id, text) => {\n    this.setState(({ todoData }) => {\n      const newTodos = [...todoData].map((todo) => {\n        if (todo.id === id) {\n          todo.label = text;\n        }\n        return todo;\n      });\n      return {\n        todoData: newTodos,\n      };\n    });\n  };\n\n  onToggleDone = (id) => {\n    this.setState(({ todoData }) => {\n      return {\n        todoData: this.toggleProp(todoData, id, 'done'),\n      };\n    });\n  };\n\n  onToggleEditing = (id) => {\n    this.setState(({ todoData }) => {\n      return {\n        todoData: this.toggleProp(todoData, id, 'editing'),\n      };\n    });\n  };\n\n  onFilterChange = (filter) => {\n    this.setState({ filter });\n  };\n\n  clearCompleted = () => {\n    this.setState(({ todoData }) => {\n      const completedTasks = todoData.filter((todo) => !todo.done);\n\n      return {\n        todoData: completedTasks,\n      };\n    });\n  };\n\n  filterTasks = (todos, filter) => {\n    switch (filter) {\n      case 'all':\n        return todos;\n      case 'active':\n        return todos.filter((todo) => !todo.done);\n      case 'completed':\n        return todos.filter((todo) => todo.done);\n      default:\n        return todos;\n    }\n  };\n\n  render() {\n    const { todoData, filter } = this.state;\n\n    const itemsDone = todoData.filter((todo) => todo.done).length;\n    const itemsLeft = todoData.length - itemsDone;\n    const filteredTasks = this.filterTasks(todoData, filter);\n\n    localStorage.setItem('todoData', JSON.stringify(todoData));\n    localStorage.setItem('filter', JSON.stringify(filter));\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n          <NewTaskForm handleAdd={this.handleAdd} />\n        </header>\n        <TaskList\n          todos={filteredTasks}\n          handleDelete={this.handleDelete}\n          handleEdit={this.handleEdit}\n          onToggleDone={this.onToggleDone}\n          onToggleEditing={this.onToggleEditing}\n        />\n        <Footer\n          itemsLeft={itemsLeft}\n          clearCompleted={this.clearCompleted}\n          filter={filter}\n          onFilterChange={this.onFilterChange}\n        />\n      </section>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App.jsx';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}