{"version":3,"sources":["components/NewTaskForm/NewTaskForm.jsx","components/Task/Task.jsx","components/TaskList/TaskList.jsx","components/TaskFilter/TasksFilter.jsx","components/Footer/Footer.jsx","components/App/App.jsx","index.js"],"names":["NewTaskForm","props","onChange","event","setState","label","target","value","onSubmit","preventDefault","state","handleAdd","trim","this","className","placeholder","Component","Task","inputValue","id","handleEdit","handleDelete","onToggleEditing","onToggleDone","done","editing","creationDate","timeCreated","formatDistanceToNow","Date","includeSeconds","type","checked","onClick","defaultProps","String","TaskList","todos","tasks","map","item","itemProps","TasksFilter","filter","onFilterChange","button","name","Footer","itemsLeft","clearCompleted","App","todoData","JSON","parse","localStorage","getItem","createTask","uuidv4","toggleProp","arr","propName","el","todo","newTask","text","filterTasks","itemsDone","length","filteredTasks","setItem","stringify","app","React","createElement","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.243c2465.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './NewTaskForm.css';\n\nexport default class NewTaskForm extends Component {\n  static propTypes = {\n    handleAdd: PropTypes.func.isRequired,\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      label: '',\n    };\n  }\n\n  onChange = (event) => {\n    this.setState({\n      label: event.target.value,\n    });\n  };\n\n  onSubmit = (event) => {\n    event.preventDefault();\n\n    const { label } = this.state;\n    const { handleAdd } = this.props;\n\n    if (label.trim() === '') {\n      this.setState({\n        label: '',\n      });\n      return;\n    }\n    handleAdd(label);\n    this.setState({\n      label: '',\n    });\n  };\n\n  render() {\n    const { label } = this.state;\n\n    return (\n      <form onSubmit={this.onSubmit}>\n        <input className=\"new-todo\" placeholder=\"What needs to be done?\" value={label} onChange={this.onChange} />\n      </form>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { formatDistanceToNow } from 'date-fns';\n\nimport './Task.css';\n\nexport default class Task extends Component {\n  static defaultProps = {\n    id: '',\n    label: 'Default task',\n    done: false,\n    editing: false,\n    creationDate: String(new Date()),\n  };\n\n  static propTypes = {\n    id: PropTypes.string,\n    label: PropTypes.string,\n    done: PropTypes.bool,\n    editing: PropTypes.bool,\n    creationDate: PropTypes.string,\n    handleEdit: PropTypes.func.isRequired,\n    handleDelete: PropTypes.func.isRequired,\n    onToggleDone: PropTypes.func.isRequired,\n    onToggleEditing: PropTypes.func.isRequired,\n  };\n\n  constructor(props) {\n    super(props);\n    const { label } = this.props;\n\n    this.state = {\n      inputValue: label,\n    };\n  }\n\n  onChange = (event) => {\n    this.setState({\n      inputValue: event.target.value,\n    });\n  };\n\n  onSubmit = (event) => {\n    event.preventDefault();\n\n    const { inputValue } = this.state;\n    const { id, handleEdit, handleDelete, onToggleEditing } = this.props;\n\n    if (inputValue.trim() === '') {\n      handleDelete();\n      return;\n    }\n    handleEdit(id, inputValue);\n    onToggleEditing(id);\n  };\n\n  render() {\n    const { label, handleDelete, onToggleDone, onToggleEditing, done, editing, creationDate } = this.props;\n    const { inputValue } = this.state;\n\n    const timeCreated = formatDistanceToNow(new Date(creationDate), {\n      includeSeconds: true,\n    });\n\n    let className;\n\n    if (done) {\n      className = 'completed';\n    } else if (editing) {\n      className = 'editing';\n    } else {\n      className = 'active';\n    }\n\n    return (\n      <li className={className}>\n        <div className=\"view\">\n          <input className=\"toggle\" type=\"checkbox\" checked={done} onChange={onToggleDone} />\n          <label>\n            <span className=\"description\">{label}</span>\n            <span className=\"created\">created {timeCreated} ago</span>\n          </label>\n          <button className=\"icon icon-edit\" onClick={onToggleEditing} type=\"button\" aria-label=\"edit\" />\n          <button className=\"icon icon-destroy\" onClick={handleDelete} type=\"button\" aria-label=\"delete\" />\n        </div>\n        <form onSubmit={this.onSubmit}>\n          <input type=\"text\" className=\"edit\" value={inputValue} onChange={this.onChange} />\n        </form>\n      </li>\n    );\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Task from '../Task/Task';\n\nimport './TaskList.css';\n\nconst TaskList = ({ todos, handleDelete, handleEdit, onToggleDone, onToggleEditing }) => {\n  const tasks = todos.map((item) => {\n    const { id, ...itemProps } = item;\n\n    return (\n      <Task\n        key={id}\n        id={id}\n        {...itemProps}\n        handleDelete={() => handleDelete(id)}\n        handleEdit={handleEdit}\n        onToggleDone={() => onToggleDone(id)}\n        onToggleEditing={() => onToggleEditing(id)}\n      />\n    );\n  });\n\n  return (\n    <section className=\"main\">\n      <ul className=\"todo-list\">{tasks}</ul>\n    </section>\n  );\n};\n\nTaskList.defaultProps = {\n  handleDelete: () => {},\n  handleEdit: () => {},\n  onToggleDone: () => {},\n  onToggleEditing: () => {},\n};\n\nTaskList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.object).isRequired,\n  handleDelete: PropTypes.func,\n  handleEdit: PropTypes.func,\n  onToggleDone: PropTypes.func,\n  onToggleEditing: PropTypes.func,\n};\n\nexport default TaskList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './TaskFilter.css';\n\nconst TasksFilter = ({ filter, onFilterChange }) => {\n  const buttons = [\n    { name: 'all', label: 'All' },\n    { name: 'active', label: 'Active' },\n    { name: 'completed', label: 'Completed' },\n  ];\n\n  const button = buttons.map(({ name, label }) => {\n    const selected = filter === name;\n    const className = selected ? 'selected' : null;\n\n    return (\n      <li key={name}>\n        <button className={className} onClick={() => onFilterChange(name)} type=\"button\">\n          {label}\n        </button>\n      </li>\n    );\n  });\n\n  return <ul className=\"filters\">{button}</ul>;\n};\n\nTasksFilter.defaultProps = {\n  filter: 'all',\n};\n\nTasksFilter.propTypes = {\n  filter: PropTypes.string,\n  onFilterChange: PropTypes.func.isRequired,\n};\n\nexport default TasksFilter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport TasksFilter from '../TaskFilter/TasksFilter';\n\nimport './Footer.css';\n\nconst Footer = ({ itemsLeft, clearCompleted, filter, onFilterChange }) => (\n  <footer className=\"footer\">\n    <span className=\"todo-count\">{itemsLeft} items left</span>\n    <TasksFilter filter={filter} onFilterChange={onFilterChange} />\n    <button className=\"clear-completed\" onClick={clearCompleted} type=\"button\">\n      Clear completed\n    </button>\n  </footer>\n);\n\nFooter.defaultProps = {\n  itemsLeft: 3,\n  filter: 'all',\n  onFilterChange: () => {},\n};\n\nFooter.propTypes = {\n  itemsLeft: PropTypes.number,\n  filter: PropTypes.string,\n  clearCompleted: PropTypes.func.isRequired,\n  onFilterChange: PropTypes.func,\n};\n\nexport default Footer;\n","import React, { Component } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport NewTaskForm from '../NewTaskForm/NewTaskForm';\nimport TaskList from '../TaskList/TaskList';\nimport Footer from '../Footer/Footer';\n\nimport './App.css';\n\nexport default class App extends Component {\n  state = {\n    todoData: JSON.parse(localStorage.getItem('todoData')) || [],\n    filter: JSON.parse(localStorage.getItem('filter')) || 'all',\n  };\n\n  createTask = (label) => ({\n    label,\n    done: false,\n    editing: false,\n    creationDate: String(new Date()),\n    id: uuidv4(),\n  });\n\n  toggleProp = (arr, id, propName) =>\n    arr.map((el) => {\n      if (el.id === id) {\n        return { ...el, [propName]: !el[propName] };\n      }\n      return el;\n    });\n\n  handleDelete = (id) => {\n    this.setState(({ todoData }) => ({\n      todoData: todoData.filter((todo) => todo.id !== id),\n    }));\n  };\n\n  handleAdd = (label) => {\n    const newTask = this.createTask(label);\n\n    this.setState(({ todoData }) => ({\n      todoData: [...todoData, newTask],\n    }));\n  };\n\n  handleEdit = (id, text) => {\n    this.setState(({ todoData }) => {\n      const newTodos = [...todoData].map((todo) => {\n        if (todo.id === id) {\n          const item = todo;\n          item.label = text;\n        }\n        return todo;\n      });\n      return {\n        todoData: newTodos,\n      };\n    });\n  };\n\n  onToggleDone = (id) => {\n    this.setState(({ todoData }) => ({\n      todoData: this.toggleProp(todoData, id, 'done'),\n    }));\n  };\n\n  onToggleEditing = (id) => {\n    this.setState(({ todoData }) => ({\n      todoData: this.toggleProp(todoData, id, 'editing'),\n    }));\n  };\n\n  onFilterChange = (filter) => {\n    this.setState({ filter });\n  };\n\n  clearCompleted = () => {\n    this.setState(({ todoData }) => {\n      const completedTasks = todoData.filter((todo) => !todo.done);\n\n      return {\n        todoData: completedTasks,\n      };\n    });\n  };\n\n  filterTasks = (todos, filter) => {\n    switch (filter) {\n      case 'all':\n        return todos;\n      case 'active':\n        return todos.filter((todo) => !todo.done);\n      case 'completed':\n        return todos.filter((todo) => todo.done);\n      default:\n        return todos;\n    }\n  };\n\n  render() {\n    const { todoData, filter } = this.state;\n\n    const itemsDone = todoData.filter((todo) => todo.done).length;\n    const itemsLeft = todoData.length - itemsDone;\n    const filteredTasks = this.filterTasks(todoData, filter);\n\n    localStorage.setItem('todoData', JSON.stringify(todoData));\n    localStorage.setItem('filter', JSON.stringify(filter));\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n          <NewTaskForm handleAdd={this.handleAdd} />\n        </header>\n        <TaskList\n          todos={filteredTasks}\n          handleDelete={this.handleDelete}\n          handleEdit={this.handleEdit}\n          onToggleDone={this.onToggleDone}\n          onToggleEditing={this.onToggleEditing}\n        />\n        <Footer\n          itemsLeft={itemsLeft}\n          clearCompleted={this.clearCompleted}\n          filter={filter}\n          onFilterChange={this.onFilterChange}\n        />\n      </section>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/App/App';\n\nconst app = React.createElement(App);\n\nReactDOM.render(app, document.getElementById('root'));\n"],"sourceRoot":""}